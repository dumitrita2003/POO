LAB 03

1)
Math.h

#pragma once

class Math
{
public:
    static int Add(int, int);
    static int Add(int, int, int);
    static int Add(double, double);
    static int Add(double, double, double);
    static int Mul(int, int);
    static int Mul(int, int, int);
    static int Mul(double, double);
    static int Mul(double, double, double);
    static int Add(int count, ...); // sums up a list of integers
    static char* Add(const char*, const char*);
};



Math.cpp

#include "Math.h"
#include <cstdarg>
#include <cstring>
#include <cstdlib>

int Math::Add(int a, int b) {
    return a + b;
}

int Math::Add(int a, int b, int c) {
    return a + b + c;
}

int Math::Add(double a, double b) {
    return static_cast<int>(a + b);
}

int Math::Add(double a, double b, double c) {
    return static_cast<int>(a + b + c);
}

int Math::Mul(int a, int b) {
    return a * b;
}

int Math::Mul(int a, int b, int c) {
    return a * b * c;
}

int Math::Mul(double a, double b) {
    return static_cast<int>(a * b);
}

int Math::Mul(double a, double b, double c) {
    return static_cast<int>(a * b * c);
}

int Math::Add(int count, ...) {
    va_list args;
    va_start(args, count);
    int sum = 0;
    for (int i = 0; i < count; ++i) {
        sum += va_arg(args, int);
    }
    va_end(args);
    return sum;
}

char* Math::Add(const char* a, const char* b) {
    if (!a || !b)
        return nullptr;

    size_t len1 = strlen(a);
    size_t len2 = strlen(b);
    char* result = new char[len1 + len2 + 1];

    strcpy(result, a);
    strcat(result, b);

    return result;
}


main.cpp
#include <iostream>
#include "Math.h"

int main() {
    std::cout << "=== Math Function Tests ===\n";

    // Integer addition
    std::cout << "Add(2, 3) = " << Math::Add(2, 3) << '\n';
    std::cout << "Add(1, 2, 3) = " << Math::Add(1, 2, 3) << '\n';

    // Double addition
    std::cout << "Add(2.5, 3.5) = " << Math::Add(2.5, 3.5) << '\n';
    std::cout << "Add(1.1, 2.2, 3.3) = " << Math::Add(1.1, 2.2, 3.3) << '\n';

    // Integer multiplication
    std::cout << "Mul(2, 3) = " << Math::Mul(2, 3) << '\n';
    std::cout << "Mul(2, 3, 4) = " << Math::Mul(2, 3, 4) << '\n';

    // Double multiplication
    std::cout << "Mul(2.5, 4.0) = " << Math::Mul(2.5, 4.0) << '\n';
    std::cout << "Mul(1.5, 2.0, 3.0) = " << Math::Mul(1.5, 2.0, 3.0) << '\n';

    // Variadic add
    std::cout << "Add(5, 1, 2, 3, 4, 5) = " << Math::Add(5, 1, 2, 3, 4, 5) << '\n';

    // String addition
    const char* str1 = "Hello, ";
    const char* str2 = "world!";
    char* result = Math::Add(str1, str2);
    if (result) {
        std::cout << "Add(\"" << str1 << "\", \"" << str2 << "\") = " << result << '\n';
        delete[] result;
    } else {
        std::cout << "One of the input strings is null.\n";
    }

    return 0;
}




2)
 Canvas.h


#pragma once

class Canvas {
private:
    int width, height;
    char** canvas;

public:
    Canvas(int width, int height);
    ~Canvas();

    void DrawCircle(int x, int y, int ray, char ch);
    void FillCircle(int x, int y, int ray, char ch);
    void DrawRect(int left, int top, int right, int bottom, char ch);
    void FillRect(int left, int top, int right, int bottom, char ch);
    void SetPoint(int x, int y, char ch);
    void DrawLine(int x1, int y1, int x2, int y2, char ch);
    void Print();  // shows what was printed
    void Clear();  // clears the canvas
};


Canvas.cpp

#include "Canvas.h"
#include <iostream>
#include <cmath>
#include <algorithm>

Canvas::Canvas(int width, int height) : width(width), height(height) {
    canvas = new char*[height];
    for (int i = 0; i < height; ++i) {
        canvas[i] = new char[width];
        std::fill(canvas[i], canvas[i] + width, ' ');
    }
}

Canvas::~Canvas() {
    for (int i = 0; i < height; ++i) {
        delete[] canvas[i];
    }
    delete[] canvas;
}

void Canvas::SetPoint(int x, int y, char ch) {
    if (x >= 0 && x < width && y >= 0 && y < height)
        canvas[y][x] = ch;
}

void Canvas::DrawRect(int left, int top, int right, int bottom, char ch) {
    for (int x = left; x <= right; ++x) {
        SetPoint(x, top, ch);
        SetPoint(x, bottom, ch);
    }
    for (int y = top; y <= bottom; ++y) {
        SetPoint(left, y, ch);
        SetPoint(right, y, ch);
    }
}

void Canvas::FillRect(int left, int top, int right, int bottom, char ch) {
    for (int y = top; y <= bottom; ++y) {
        for (int x = left; x <= right; ++x) {
            SetPoint(x, y, ch);
        }
    }
}

void Canvas::DrawCircle(int x0, int y0, int radius, char ch) {
    int x = radius;
    int y = 0;
    int err = 0;

    while (x >= y) {
        SetPoint(x0 + x, y0 + y, ch);
        SetPoint(x0 + y, y0 + x, ch);
        SetPoint(x0 - y, y0 + x, ch);
        SetPoint(x0 - x, y0 + y, ch);
        SetPoint(x0 - x, y0 - y, ch);
        SetPoint(x0 - y, y0 - x, ch);
        SetPoint(x0 + y, y0 - x, ch);
        SetPoint(x0 + x, y0 - y, ch);

        if (err <= 0) {
            y += 1;
            err += 2*y + 1;
        } else {
            x -= 1;
            err -= 2*x + 1;
        }
    }
}

void Canvas::FillCircle(int x0, int y0, int radius, char ch) {
    for (int y = -radius; y <= radius; ++y) {
        for (int x = -radius; x <= radius; ++x) {
            if (x * x + y * y <= radius * radius) {
                SetPoint(x0 + x, y0 + y, ch);
            }
        }
    }
}

void Canvas::DrawLine(int x1, int y1, int x2, int y2, char ch) {
    int dx = std::abs(x2 - x1);
    int dy = std::abs(y2 - y1);
    int sx = x1 < x2 ? 1 : -1;
    int sy = y1 < y2 ? 1 : -1;
    int err = dx - dy;

    while (true) {
        SetPoint(x1, y1, ch);
        if (x1 == x2 && y1 == y2) break;
        int e2 = 2 * err;
        if (e2 > -dy) { err -= dy; x1 += sx; }
        if (e2 < dx) { err += dx; y1 += sy; }
    }
}

void Canvas::Clear() {
    for (int i = 0; i < height; ++i) {
        std::fill(canvas[i], canvas[i] + width, ' ');
    }
}

void Canvas::Print() {
    for (int i = 0; i < height; ++i) {
        for (int j = 0; j < width; ++j) {
            std::cout << canvas[i][j];
        }
        std::cout << '\n';
    }
}


main.cpp
#include <iostream>
#include "Canvas.h"

int main() {
    Canvas canvas(40, 20);

    // Fill rectangle
    canvas.FillRect(1, 1, 10, 5, '#');
    
    // Draw rectangle border
    canvas.DrawRect(12, 1, 20, 5, '*');

    // Fill circle
    canvas.FillCircle(10, 12, 4, '@');

    // Draw circle border
    canvas.DrawCircle(25, 12, 5, 'O');

    // Draw a line
    canvas.DrawLine(0, 0, 39, 19, '+');

    // Set a single point
    canvas.SetPoint(39, 0, 'X');

    // Print the canvas
    canvas.Print();

    return 0;
}



